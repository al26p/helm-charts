# global:
#   image:
#     repository: ""
#     tag: ""

replicaCount: 1

image:
  repository: ""
  pullPolicy: Always
  tag: ""
  pullSecrets: []

nameOverride: ""
fullnameOverride: ""

containerName: ""

initContainers: []

sidecars: []

lifecycleHooks: {}

annotations: {}

podAnnotations: {}

revisionHistoryLimit: 2

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000


  # strategy: {}
    # type: RollingUpdate
    # rollingUpdate:
    #   maxUnavailable: 0
    #   maxSurge: 1


networkPolicy:
  egress:
    enabled: false
    content: []
  ingress:
    enabled: false
    content: []

service:
  enabled: true
  type: ClusterIP
  protocol: TCP
  port: 80
  extraPorts: []
#    - port: 8080
#      targetPort: 8080
#      protocol: TCP
#      name: admin

containerPort: 3000

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts: []
    # - host: chart-example.local
    #   paths:
    #     - path: /
    #       pathType: Prefix
  tls: []
  # - secretName: chart-example-tls
  #   hosts:
  #   - chart-example.local

resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

persistentVolume:
  enabled: false
  accessModes:
    - ReadWriteOnce
  existingClaim: ""
  size: 10Gi
  storageClass: ""
  subPath: ""
  volumeBindingMode: ""
  annotations: {}

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 300
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

livenessProbe: {}
  # tcpSocket:
  #   port: http
  # initialDelaySeconds: 10
  # periodSeconds: 30
  # timeoutSeconds: 10
  # successThreshold: 1
  # failureThreshold: 10

readinessProbe: {}
  # httpGet:
  #   path: /health
  #   port: http
  # initialDelaySeconds: 10
  # periodSeconds: 60
  # timeoutSeconds: 10
  # successThreshold: 1
  # failureThreshold: 10

startupProbe: {}
  # httpGet:
  #   path: /health
  #   port: http
  # initialDelaySeconds: 10
  # periodSeconds: 60
  # timeoutSeconds: 10
  # successThreshold: 1
  # failureThreshold: 10

vpaRecommender:
  enabled: false

pdb:
  enabled: false
  # Optionnal
  minAvailable: 1
  # Optionnal
  # maxUnavailable: 5

env: []

envFrom: []

command: []

args: []

volumes: []

volumeMounts: []

serviceAccount:
  annotations: {}

cronJobs: []
  # - name: my-cronjob
  #   schedule: "0 0 * * *"
  #   image: # Use global image if not defined
  #     repository: "hello-world"
  #     pullPolicy: Always
  #     tag: "latest"
  #   concurrencyPolicy: ""
  #   imagePullPolicy: ""
  #   failedJobsHistoryLimit: ""
  #   terminationGracePeriodSeconds: ""
  #   successfulJobsHistoryLimit: ""
  #   restartPolicy: ""
  #   resources:
  #     limits:
  #       cpu: 100m
  #       memory: 128Mi
  #     requests:
  #       cpu: 100m
  #       memory: 128Mi
  #   command:
  #     - "hello world"
  #   args:
  #     - "hello world"
  #   env:
  #     - name: "MYVAR"
  #       values: "my-value"
  #   envFrom:
  #     - secretRef:
  #       name: "my-secret"
  #   affinity: {}
  #   nodeSelector: {}
  #   tolerations: []
  #   priorityClassName: ""
  #   schedulerName: ""

jobs:
  # - name: my-job
  #   useGenerateName: false # If true create a job with a generateName with a "-" instead of name.
  #   annotations: {}
  #   image: # Use global image if not defined
  #     repository: ""
  #     tag: ""
  #   imagePullPolicy: ""
  #   imagePullSecrets: [] # Use global imagePullSecrets if not defined
  #   terminationGracePeriodSeconds: 30
  #   restartPolicy: ""
  #   backoffLimit: 6
  #   resources: {}
  #   command: []
  #   args: []
  #   env: []
  #   envFrom: []
  #   volumeMounts: []
  #   volumes: []
  #   securityContext: {}
  #   podSecurityContext: {}